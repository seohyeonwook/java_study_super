package exercise;

public class Study {
    // 질문 1  return 과void는 어떻게 구분하고 코드 작성해?

//    ChatGPT의 말:
//    ChatGPT
//    return과 void의 사용은 메서드가 어떤 작업을 수행하고, 그 결과를 호출한 쪽에 돌려줄지 여부에 따라 달라집니다. 두 가지를 구분하는 방법을 설명해드릴게요.
//
//1. void 메서드
//    목적: 메서드가 어떤 작업을 수행하고, 그 결과를 호출한 쪽에 돌려줄 필요가 없을 때 사용합니다.
//    특징: 메서드 내에서 작업을 수행하고, 결과를 반환하지 않습니다. 보통 출력을 하거나 객체의 상태를 변경하는 등의 작업에 사용됩니다.
//            예시:
//
//    java
//    코드 복사
//    // void 메서드: 결과를 반환하지 않고 출력만 함
//    static void printSum(int a, int b) {
//        int sum = a + b;
//        System.out.println("The sum is: " + sum);
//    }
//
//    public static void main(String[] args) {
//        printSum(5, 10);  // "The sum is: 15" 출력
//    }
//    이 경우, printSum 메서드는 void로 선언되어 있고, 단지 결과를 출력만 합니다.
//
//2. return 메서드
//    목적: 메서드가 어떤 작업을 수행한 후, 그 결과를 호출한 쪽에 돌려줘야 할 때 사용합니다.
//    특징: 메서드는 특정한 자료형을 반환해야 하며, 호출한 쪽에서 그 결과를 받아서 추가 작업을 할 수 있습니다.
//    예시:
//
//    java
//    코드 복사
//    // return 메서드: 결과를 반환함
//    static int calculateSum(int a, int b) {
//        int sum = a + b;
//        return sum;  // 결과를 호출한 쪽에 반환
//    }
//
//    public static void main(String[] args) {
//        int result = calculateSum(5, 10);  // 결과를 반환받아 저장
//        System.out.println("The sum is: " + result);  // "The sum is: 15" 출력
//    }
//    이 경우, calculateSum 메서드는 int를 반환하도록 되어 있으며, 그 결과를 호출한 쪽에서 받아서 출력하거나 다른 작업에 사용할 수 있습니다.
//
//            요약:
//    void: 메서드가 작업을 수행하고 아무런 결과도 반환하지 않을 때 사용합니다.
//            예: 단순히 값을 출력하거나, 객체의 상태를 변경하는 메서드.
//    반환형 (int, String, 등): 메서드가 작업을 수행한 후, 그 결과를 반환하고자 할 때 사용합니다.
//            예: 계산 결과를 반환하거나, 특정 값을 전달하는 메서드.
//    코드를 작성할 때, 메서드가 어떤 결과를 호출한 쪽에서 사용할 필요가 있다면 반환형을 지정하고 return을 사용하고,
//    그럴 필요가 없다면 void로 선언하여 작업만 수행하도록 코드를 작성하면 됩니다.

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        // 질문2 - 메인메서드와 일반메서드의 차이와 어떻게 구분해?

//    메인 메서드와 일반 메서드는 역할, 사용 방식, 그리고 프로그램 내에서의 위치에 따라 다릅니다. 각각의 차이점과 구분 방법을 설명해드릴게요.
//
//1. 메인 메서드 (main 메서드)
//    역할:
//
//    메인 메서드는 자바 프로그램의 시작 지점입니다. 프로그램이 실행되면 가장 먼저 호출되는 메서드입니다.
//    public static void main(String[] args)는 모든 자바 애플리케이션에 필요한 메서드 시그니처입니다.
//    특징:
//
//    항상 public, static, 그리고 void로 선언됩니다.
//    String[] args는 명령 줄 인수를 받을 수 있도록 하는 매개변수입니다.
//    메인 메서드는 자바 가상 머신(JVM)에 의해 자동으로 호출됩니다.
//    사용:
//
//    프로그램의 진입점으로서, 여기서 다른 메서드들을 호출하여 프로그램의 흐름을 제어합니다.
//    예를 들어, 메인 메서드에서 객체를 생성하고, 메서드를 호출하며, 프로그램의 논리를 실행합니다.
//    java
//    코드 복사
//    public static void main(String[] args) {
//        // 프로그램의 시작 지점, 다른 메서드와 객체를 호출하여 프로그램 실행
//    }
//2. 일반 메서드
//    역할:
//
//    일반 메서드는 프로그램 내에서 특정 작업을 수행하기 위해 정의됩니다. 이 작업은 여러 번 호출될 수 있습니다.
//    일반 메서드는 특정 기능을 캡슐화하여 재사용 가능하게 만듭니다.
//    특징:
//
//    반환형(예: int, String, void 등)과 매개변수를 가질 수 있습니다.
//    메인 메서드처럼 static으로 선언될 수도 있지만, 보통은 클래스의 인스턴스와 함께 사용됩니다.
//    메서드는 static으로 선언되지 않으면 클래스의 인스턴스가 필요하며, static으로 선언된 메서드는 클래스 자체에서 호출할 수 있습니다.
//    사용:
//
//    메인 메서드 또는 다른 메서드에서 호출되어 특정 작업을 수행합니다.
//    예를 들어, 계산 작업, 데이터 처리, 값을 반환하는 작업 등을 수행합니다.
//    java
//    코드 복사
//    static int toUnicode(char ch) {
//        return (int) ch;  // 특정 작업을 수행하고 결과를 반환
//    }
//    구분 방법
//    메인 메서드 (main):
//
//    자바 애플리케이션의 시작점.
//    프로그램 실행 시 자동으로 호출.
//    public static void main(String[] args) 시그니처를 가져야 함.
//    일반 메서드:
//
//    특정 작업을 수행하도록 설계된 메서드.
//    반환형과 매개변수를 가질 수 있음.
//    메인 메서드 또는 다른 메서드에 의해 호출됨.
//    코드 분석 예시
//            java
//    코드 복사
//    public static void main(String[] args) {
//        char ch = 'A';
//        int decode = toUnicode(ch);  // 일반 메서드 호출
//        System.out.println(decode);
//
//        int myInt1 = 10;
//        int myInt2 = 5;
//        int result = sumAndMultiplyFour(myInt1, myInt2);  // 일반 메서드 호출
//        System.out.println(result);
//    }
//
//    static int toUnicode(char ch) {
//        return (int) ch;  // char 값을 int로 변환하여 반환
//    }
//
//    static int sumAndMultiplyFour(int a, int b) {
//        return (a + b) * 4;  // 두 수의 합을 4배하여 반환
//    }
//    메인 메서드: main 메서드는 프로그램의 시작점이며, 여기서 다른 메서드(toUnicode, sumAndMultiplyFour)를 호출하여 각각의 작업을 수행하고, 그 결과를 출력합니다.
//
//    일반 메서드: toUnicode와 sumAndMultiplyFour는 각각의 작업을 수행한 후 그 결과를 반환하며, 메인 메서드에서 호출됩니다.

}
